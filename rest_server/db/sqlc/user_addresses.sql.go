// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_addresses.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO user_addresses
(country, city, line_1, line_2, zip)
VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateUserAddressParams struct {
	Country sql.NullString `json:"country"`
	City    string         `json:"city"`
	Line1   string         `json:"line_1"`
	Line2   string         `json:"line_2"`
	Zip     string         `json:"zip"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUserAddress,
		arg.Country,
		arg.City,
		arg.Line1,
		arg.Line2,
		arg.Zip,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserAddress = `-- name: GetUserAddress :one
SELECT id, country, city, line_1, line_2, zip, created_at, updated_at FROM user_addresses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAddress(ctx context.Context, id uuid.UUID) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getUserAddress, id)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.City,
		&i.Line1,
		&i.Line2,
		&i.Zip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserAddress = `-- name: UpdateUserAddress :exec
UPDATE user_addresses
SET country = $1, city = $2, line_1 = $3, line_2 = $4, zip = $5, updated_at = $6
WHERE id = $7
`

type UpdateUserAddressParams struct {
	Country   sql.NullString `json:"country"`
	City      string         `json:"city"`
	Line1     string         `json:"line_1"`
	Line2     string         `json:"line_2"`
	Zip       string         `json:"zip"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAddress,
		arg.Country,
		arg.City,
		arg.Line1,
		arg.Line2,
		arg.Zip,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
