// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: finger_print.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFingerPrint = `-- name: CreateFingerPrint :one
INSERT INTO passport_finger_prints
(public_key)
VALUES ($1) RETURNING id, public_key, created_at, updated_at
`

func (q *Queries) CreateFingerPrint(ctx context.Context, publicKey string) (PassportFingerPrint, error) {
	row := q.db.QueryRowContext(ctx, createFingerPrint, publicKey)
	var i PassportFingerPrint
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFingerPrint = `-- name: GetFingerPrint :one
SELECT id, public_key, created_at, updated_at FROM passport_finger_prints
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFingerPrint(ctx context.Context, id uuid.UUID) (PassportFingerPrint, error) {
	row := q.db.QueryRowContext(ctx, getFingerPrint, id)
	var i PassportFingerPrint
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFingerPrint = `-- name: UpdateFingerPrint :one
UPDATE passport_finger_prints
SET public_key = $1, updated_at = $2
WHERE id = $3 RETURNING id, public_key, created_at, updated_at
`

type UpdateFingerPrintParams struct {
	PublicKey string       `json:"public_key"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateFingerPrint(ctx context.Context, arg UpdateFingerPrintParams) (PassportFingerPrint, error) {
	row := q.db.QueryRowContext(ctx, updateFingerPrint, arg.PublicKey, arg.UpdatedAt, arg.ID)
	var i PassportFingerPrint
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
