// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: role_classes.sql

package db

import (
	"context"
)

const createRoleClass = `-- name: CreateRoleClass :one
INSERT INTO role_classes ("class")
VALUES ($1) RETURNING "class"
`

func (q *Queries) CreateRoleClass(ctx context.Context, class string) (string, error) {
	row := q.db.QueryRowContext(ctx, createRoleClass, class)
	err := row.Scan(&class)
	return class, err
}

const getRoleClass = `-- name: GetRoleClass :one
SELECT class, description, created_at FROM role_classes
WHERE "class" = $1 LIMIT 1
`

func (q *Queries) GetRoleClass(ctx context.Context, class string) (RoleClass, error) {
	row := q.db.QueryRowContext(ctx, getRoleClass, class)
	var i RoleClass
	err := row.Scan(&i.Class, &i.Description, &i.CreatedAt)
	return i, err
}

const listRoleClasses = `-- name: ListRoleClasses :many
SELECT class, description, created_at FROM role_classes
ORDER BY "class"
`

func (q *Queries) ListRoleClasses(ctx context.Context) ([]RoleClass, error) {
	rows, err := q.db.QueryContext(ctx, listRoleClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleClass
	for rows.Next() {
		var i RoleClass
		if err := rows.Scan(&i.Class, &i.Description, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
