// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_roles.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles ("name", "class")
VALUES ($1, $2) RETURNING id
`

type CreateUserRoleParams struct {
	Name  string         `json:"name"`
	Class sql.NullString `json:"class"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUserRole, arg.Name, arg.Class)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, name, class, created_at, updated_at FROM user_roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserRole(ctx context.Context, id uuid.UUID) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, id)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Class,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE user_roles SET "class" = $1, updated_at = $2
WHERE id = $3
`

type UpdateUserRoleParams struct {
	Class     sql.NullString `json:"class"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRole, arg.Class, arg.UpdatedAt, arg.ID)
	return err
}
