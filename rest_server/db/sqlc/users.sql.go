// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(email, password_hash, role_id)
VALUES ($1, $2, $3) RETURNING id, email
`

type CreateUserParams struct {
	Email        string        `json:"email"`
	PasswordHash string        `json:"password_hash"`
	RoleID       uuid.NullUUID `json:"role_id"`
}

type CreateUserRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash, arg.RoleID)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    u.id,
    u.first_name,
    u.last_name,
    u.email,
    u.password_hash,
    u.birth_date,
    u.sex,
    un.nationality,
    un.code as "nationality_code",
    un.alpha_2,
    un.alpha_3,
    ur.name as "role_name",
    ur.class as "role_class",
    ua.country,
    ua.city,
    ua.line_1,
    ua.line_2,
    ua.zip,
    upn.country_code as "phone_country_code",
    upn.number as "phone_number",
    upt.url as "photo_url",
    up.country_code as "passport_country_code",
    up.issuing_organization,
    up.mrz_l1,
    up.mrz_l2,
    up.u_number,
    up.p_number,
    up.issue_date as "passport_issue_date",
    up.expiration_date as "passport_expiration_date",
    up.place_of_birth,
    up.type as "passport_type",
    fp.public_key
FROM users u
LEFT JOIN nationalities un ON un.code = u.nationality
LEFT JOIN user_roles ur ON ur.id = u.role_id
LEFT JOIN user_addresses ua ON ua.id = u.address_id
LEFT JOIN user_phones upn ON upn.id = u.phone_id
LEFT JOIN user_photos upt ON upt.id = u.photo_id
LEFT JOIN user_passports up ON up.id = u.passport_id
LEFT JOIN passport_finger_prints fp ON fp.id = up.finger_print_id
WHERE u.email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID                     uuid.UUID      `json:"id"`
	FirstName              sql.NullString `json:"first_name"`
	LastName               sql.NullString `json:"last_name"`
	Email                  string         `json:"email"`
	PasswordHash           string         `json:"password_hash"`
	BirthDate              sql.NullTime   `json:"birth_date"`
	Sex                    sql.NullString `json:"sex"`
	Nationality            sql.NullString `json:"nationality"`
	NationalityCode        sql.NullInt32  `json:"nationality_code"`
	Alpha2                 sql.NullString `json:"alpha_2"`
	Alpha3                 sql.NullString `json:"alpha_3"`
	RoleName               sql.NullString `json:"role_name"`
	RoleClass              sql.NullString `json:"role_class"`
	Country                sql.NullString `json:"country"`
	City                   sql.NullString `json:"city"`
	Line1                  sql.NullString `json:"line_1"`
	Line2                  sql.NullString `json:"line_2"`
	Zip                    sql.NullString `json:"zip"`
	PhoneCountryCode       sql.NullString `json:"phone_country_code"`
	PhoneNumber            sql.NullString `json:"phone_number"`
	PhotoUrl               sql.NullString `json:"photo_url"`
	PassportCountryCode    sql.NullString `json:"passport_country_code"`
	IssuingOrganization    sql.NullString `json:"issuing_organization"`
	MrzL1                  sql.NullString `json:"mrz_l1"`
	MrzL2                  sql.NullString `json:"mrz_l2"`
	UNumber                sql.NullString `json:"u_number"`
	PNumber                sql.NullString `json:"p_number"`
	PassportIssueDate      sql.NullTime   `json:"passport_issue_date"`
	PassportExpirationDate sql.NullTime   `json:"passport_expiration_date"`
	PlaceOfBirth           sql.NullString `json:"place_of_birth"`
	PassportType           sql.NullString `json:"passport_type"`
	PublicKey              sql.NullString `json:"public_key"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.BirthDate,
		&i.Sex,
		&i.Nationality,
		&i.NationalityCode,
		&i.Alpha2,
		&i.Alpha3,
		&i.RoleName,
		&i.RoleClass,
		&i.Country,
		&i.City,
		&i.Line1,
		&i.Line2,
		&i.Zip,
		&i.PhoneCountryCode,
		&i.PhoneNumber,
		&i.PhotoUrl,
		&i.PassportCountryCode,
		&i.IssuingOrganization,
		&i.MrzL1,
		&i.MrzL2,
		&i.UNumber,
		&i.PNumber,
		&i.PassportIssueDate,
		&i.PassportExpirationDate,
		&i.PlaceOfBirth,
		&i.PassportType,
		&i.PublicKey,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
    u.id,
    u.first_name,
    u.last_name,
    u.email,
    u.password_hash,
    u.birth_date,
    u.sex,
    un.nationality,
    un.code as "nationality_code",
    un.alpha_2,
    un.alpha_3,
    ur.name as "role_name",
    ur.class as "role_class",
    ua.country,
    ua.city,
    ua.line_1,
    ua.line_2,
    ua.zip,
    upn.country_code as "phone_country_code",
    upn.number as "phone_number",
    upt.url as "photo_url",
    up.country_code as "passport_country_code",
    up.issuing_organization,
    up.mrz_l1,
    up.mrz_l2,
    up.u_number,
    up.p_number,
    up.issue_date as "passport_issue_date",
    up.expiration_date as "passport_expiration_date",
    up.place_of_birth,
    up.type as "passport_type",
    fp.public_key
FROM users u
LEFT JOIN nationalities un ON un.code = u.nationality
LEFT JOIN user_roles ur ON ur.id = u.role_id
LEFT JOIN user_addresses ua ON ua.id = u.address_id
LEFT JOIN user_phones upn ON upn.id = u.phone_id
LEFT JOIN user_photos upt ON upt.id = u.photo_id
LEFT JOIN user_passports up ON up.id = u.passport_id
LEFT JOIN passport_finger_prints fp ON fp.id = up.finger_print_id
WHERE u.id = $1 LIMIT 1
`

type GetUserByIdRow struct {
	ID                     uuid.UUID      `json:"id"`
	FirstName              sql.NullString `json:"first_name"`
	LastName               sql.NullString `json:"last_name"`
	Email                  string         `json:"email"`
	PasswordHash           string         `json:"password_hash"`
	BirthDate              sql.NullTime   `json:"birth_date"`
	Sex                    sql.NullString `json:"sex"`
	Nationality            sql.NullString `json:"nationality"`
	NationalityCode        sql.NullInt32  `json:"nationality_code"`
	Alpha2                 sql.NullString `json:"alpha_2"`
	Alpha3                 sql.NullString `json:"alpha_3"`
	RoleName               sql.NullString `json:"role_name"`
	RoleClass              sql.NullString `json:"role_class"`
	Country                sql.NullString `json:"country"`
	City                   sql.NullString `json:"city"`
	Line1                  sql.NullString `json:"line_1"`
	Line2                  sql.NullString `json:"line_2"`
	Zip                    sql.NullString `json:"zip"`
	PhoneCountryCode       sql.NullString `json:"phone_country_code"`
	PhoneNumber            sql.NullString `json:"phone_number"`
	PhotoUrl               sql.NullString `json:"photo_url"`
	PassportCountryCode    sql.NullString `json:"passport_country_code"`
	IssuingOrganization    sql.NullString `json:"issuing_organization"`
	MrzL1                  sql.NullString `json:"mrz_l1"`
	MrzL2                  sql.NullString `json:"mrz_l2"`
	UNumber                sql.NullString `json:"u_number"`
	PNumber                sql.NullString `json:"p_number"`
	PassportIssueDate      sql.NullTime   `json:"passport_issue_date"`
	PassportExpirationDate sql.NullTime   `json:"passport_expiration_date"`
	PlaceOfBirth           sql.NullString `json:"place_of_birth"`
	PassportType           sql.NullString `json:"passport_type"`
	PublicKey              sql.NullString `json:"public_key"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.BirthDate,
		&i.Sex,
		&i.Nationality,
		&i.NationalityCode,
		&i.Alpha2,
		&i.Alpha3,
		&i.RoleName,
		&i.RoleClass,
		&i.Country,
		&i.City,
		&i.Line1,
		&i.Line2,
		&i.Zip,
		&i.PhoneCountryCode,
		&i.PhoneNumber,
		&i.PhotoUrl,
		&i.PassportCountryCode,
		&i.IssuingOrganization,
		&i.MrzL1,
		&i.MrzL2,
		&i.UNumber,
		&i.PNumber,
		&i.PassportIssueDate,
		&i.PassportExpirationDate,
		&i.PlaceOfBirth,
		&i.PassportType,
		&i.PublicKey,
	)
	return i, err
}

const setAddressRelation = `-- name: SetAddressRelation :exec
UPDATE users
SET address_id = $1
WHERE id = $2
`

type SetAddressRelationParams struct {
	AddressID uuid.NullUUID `json:"address_id"`
	ID        uuid.UUID     `json:"id"`
}

func (q *Queries) SetAddressRelation(ctx context.Context, arg SetAddressRelationParams) error {
	_, err := q.db.ExecContext(ctx, setAddressRelation, arg.AddressID, arg.ID)
	return err
}

const setPhoneRelation = `-- name: SetPhoneRelation :exec
UPDATE users
SET phone_id = $1
WHERE id = $2
`

type SetPhoneRelationParams struct {
	PhoneID uuid.NullUUID `json:"phone_id"`
	ID      uuid.UUID     `json:"id"`
}

func (q *Queries) SetPhoneRelation(ctx context.Context, arg SetPhoneRelationParams) error {
	_, err := q.db.ExecContext(ctx, setPhoneRelation, arg.PhoneID, arg.ID)
	return err
}

const setPhotoRelation = `-- name: SetPhotoRelation :exec
UPDATE users
SET photo_id = $1
WHERE id = $2
`

type SetPhotoRelationParams struct {
	PhotoID uuid.NullUUID `json:"photo_id"`
	ID      uuid.UUID     `json:"id"`
}

func (q *Queries) SetPhotoRelation(ctx context.Context, arg SetPhotoRelationParams) error {
	_, err := q.db.ExecContext(ctx, setPhotoRelation, arg.PhotoID, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET first_name = $1, last_name = $2, birth_date = $3, nationality = $4, sex = $5, updated_at = $6
WHERE id = $7
`

type UpdateUserParams struct {
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	BirthDate   sql.NullTime   `json:"birth_date"`
	Nationality sql.NullInt32  `json:"nationality"`
	Sex         sql.NullString `json:"sex"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.BirthDate,
		arg.Nationality,
		arg.Sex,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
