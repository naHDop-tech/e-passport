// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_phones.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserPhone = `-- name: CreateUserPhone :one
INSERT INTO user_phones
(country_code, "number")
VALUES ($1, $2) RETURNING id, country_code, number, created_at, updated_at
`

type CreateUserPhoneParams struct {
	CountryCode string `json:"country_code"`
	Number      string `json:"number"`
}

func (q *Queries) CreateUserPhone(ctx context.Context, arg CreateUserPhoneParams) (UserPhone, error) {
	row := q.db.QueryRowContext(ctx, createUserPhone, arg.CountryCode, arg.Number)
	var i UserPhone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPhone = `-- name: GetUserPhone :one
SELECT id, country_code, number, created_at, updated_at FROM user_phones
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserPhone(ctx context.Context, id uuid.UUID) (UserPhone, error) {
	row := q.db.QueryRowContext(ctx, getUserPhone, id)
	var i UserPhone
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :exec
UPDATE user_phones
SET country_code = $1, "number" = $2, updated_at = $3
WHERE id = $4
`

type UpdateUserPhoneParams struct {
	CountryCode string       `json:"country_code"`
	Number      string       `json:"number"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	ID          uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPhone,
		arg.CountryCode,
		arg.Number,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
