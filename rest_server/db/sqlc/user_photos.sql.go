// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_photos.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserPhoto = `-- name: CreateUserPhoto :one
INSERT INTO user_photos
(file_name, mime_type, url)
VALUES ($1, $2, $3) RETURNING id, file_name, mime_type, url, created_at, updated_at
`

type CreateUserPhotoParams struct {
	FileName string `json:"file_name"`
	MimeType string `json:"mime_type"`
	Url      string `json:"url"`
}

func (q *Queries) CreateUserPhoto(ctx context.Context, arg CreateUserPhotoParams) (UserPhoto, error) {
	row := q.db.QueryRowContext(ctx, createUserPhoto, arg.FileName, arg.MimeType, arg.Url)
	var i UserPhoto
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.MimeType,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPhoto = `-- name: GetUserPhoto :one
SELECT id, file_name, mime_type, url, created_at, updated_at FROM user_photos
WHERE id = $1
`

func (q *Queries) GetUserPhoto(ctx context.Context, id uuid.UUID) (UserPhoto, error) {
	row := q.db.QueryRowContext(ctx, getUserPhoto, id)
	var i UserPhoto
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.MimeType,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPhoto = `-- name: UpdateUserPhoto :exec
UPDATE user_photos
SET file_name = $1, mime_type = $2, url = $3, updated_at = $4
WHERE id = $5
`

type UpdateUserPhotoParams struct {
	FileName  string       `json:"file_name"`
	MimeType  string       `json:"mime_type"`
	Url       string       `json:"url"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	ID        uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateUserPhoto(ctx context.Context, arg UpdateUserPhotoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPhoto,
		arg.FileName,
		arg.MimeType,
		arg.Url,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
